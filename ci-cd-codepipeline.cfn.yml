---
AWSTemplateFormatVersion: 2010-09-09

Description: >-
  Description: AWS CloudFormation Template for creating an Amazon RDS DB and EKSWSV1 instance: 
  The DB instance will run with Enhanced Monitoring enabled.The IAM role for Enhanced Monitoring 
  specified in MonitoringRoleArn must exist before you run this template


Parameters:

  EksClusterName:
    Type: String
    Description: The name of the EKS cluster created
    Default: salon-api
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter the EKS cluster name

  GitSourceRepo:
    Type: String
    Description: GitHub source repository - must contain a Dockerfile and buildspec.yml in the base
    Default: Joses_FSND_Capstone
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub repository name

  GitBranch:
    Type: String
    Default: main
    Description: GitHub git repository branch - change triggers a new build
    MinLength: 1
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub repository branch name

  GitHubToken:
    Type: String
    NoEcho: true
    Description: GitHub API token - see https://github.com/blog/1509-personal-api-tokens
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub personal access token

  GitHubUser:
    Type: String
    Default: Josesx506
    Description: GitHub username or organization
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a GitHub username or organization

  DBInstanceID:
    Default: salondbinstance
    Description: Salon database instance
    Type: String
    MinLength: '1'
    MaxLength: '63'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: >-
      Must begin with a letter and must not end with a hyphen or contain two
      consecutive hyphens.
  
  DBName:
    Default: salondb
    Description: My salon database
    Type: String
    MinLength: '1'
    MaxLength: '64'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: Must begin with a letter and contain only alphanumeric characters.

  DBPort:
    Type: Number
    Default: 5432
    Description: The port for the database connection
    MinValue: 1
    MaxValue: 65535
  
  DBInstanceClass:
    Default: db.t3.small
    Description: DB instance class
    Type: String
    ConstraintDescription: Must select a valid DB instance type.
  
  DBEngine:
    Default: 'postgres'
    Description: The name of the database engine to be used for the RDS instance
    Type: String
    AllowedValues:
      - 'postgres'
    ConstraintDescription: Must be 'postgres' for PostgreSQL engine.
  
  PostgreSQLEngineVersion:
    Default: '14.3'
    Description: PostgreSQL engine version
    Type: String
    ConstraintDescription: PostgreSQL engine version that is closest to my local version of 14.1.
  
  DBAllocatedStorage:
    Default: '25'
    Description: The size of the database (GiB)
    Type: Number
    MinValue: '20'
    MaxValue: '65536'
    ConstraintDescription: must be between 20 and 65536 GiB.
  
  DBUsername:
    NoEcho: 'true'
    Description: Username for PostgreSQL database access
    Type: String
    MinLength: '1'
    MaxLength: '16'
    AllowedPattern: '[a-zA-Z][a-zA-Z0-9]*'
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  
  DBPassword:
    NoEcho: 'true'
    Description: Password PostgreSQL database access
    Type: String
    MinLength: '8'
    MaxLength: '41'
    AllowedPattern: '[a-zA-Z0-9]*'
    ConstraintDescription: must contain only alphanumeric characters.

  CodeBuildDockerImage:
    Type: String
    Default: aws/codebuild/standard:4.0
    Description: AWS CodeBuild Docker optimized image
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a CodeBuild Docker image

  KubectlRoleName:
    Type: String
    Default: UdacityCapstoneKubectlRole
    Description: IAM role used by kubectl to interact with EKS cluster
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a kubectl IAM role
  
  RDSMonitoringRoleName:
    Type: String
    Default: UdacityCapstoneRDSMonitoringRole
    Description: IAM role used by the rds postgres db to interact with EKS cluster
    MinLength: 3
    MaxLength: 100
    ConstraintDescription: You must enter a rds monitoring IAM role


Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: GitHub
        Parameters:
          - GitHubUser
          - GitHubToken
          - GitSourceRepo
          - GitBranch
      - Label:
          default: CodeBuild
        Parameters:
          - CodeBuildDockerImage
      - Label:
          default: IAM
        Parameters:
          - KubectlRoleName
          - RDSMonitoringRoleName
      - Label:
          default: EKS
        Parameters:
          - EksClusterName
      - Label:
          default: RdsDB
        Parameters:
          - DBInstanceID
          - DBName
          - DBPort
          - DBInstanceClass
          - DBEngine
          - PostgreSQLEngineVersion
          - DBAllocatedStorage
          - DBUsername
          - DBPassword
    ParameterLabels:
      GitHubUser:
        default: Username
      GitHubToken:
        default: Access token
      GitSourceRepo:
        default: Repository
      GitBranch:
        default: Branch
      DBUsername:
        default: PSQL Username
      DBPassword:
        default: PSQL Password
      CodeBuildDockerImage:
        default: Docker image
      KubectlRoleName:
        default: kubectl IAM role
      RDSMonitoringRoleName:
        default: RDSMonitoring IAM role
      EksClusterName:
        default: EKS cluster name


Resources:

  EcrDockerRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain

  CodePipelineArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  CustomResourceLambda:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: |
          import json
          import boto3
          from botocore.vendored import requests
          def handler(event, context):
            response = {
              'Status': 'SUCCESS',
              "Reason": "See the details in CloudWatch Log Stream: " + context.log_stream_name,
              'PhysicalResourceId': context.log_stream_name,
              'StackId': event['StackId'],
              'RequestId': event['RequestId'],
              'LogicalResourceId': event['LogicalResourceId'],
              'Data': {"Message": "Resource creation successful!"},
            }

            client = boto3.client('iam')
            try:
              if event['RequestType'] == 'Create':
                kubectl_role_name = event['ResourceProperties']['KubectlRoleName']
                build_role_arn = event['ResourceProperties']['CodeBuildServiceRoleArn']

                assume = client.get_role(RoleName = kubectl_role_name)
                assume_doc = assume['Role']['AssumeRolePolicyDocument']
                roles = [ { 'Effect': 'Allow', 'Principal': { 'AWS': build_role_arn }, 'Action': 'sts:AssumeRole' } ]

                for statement in assume_doc['Statement']:
                  if 'AWS' in statement['Principal']:
                    if statement['Principal']['AWS'].startswith('arn:aws:iam:'):
                      roles.append(statement)

                assume_doc['Statement'] = roles
                update_response = client.update_assume_role_policy(RoleName = kubectl_role_name, PolicyDocument = json.dumps(assume_doc))
            except Exception as e:
              print(e)
              response['Status'] = 'FAILED'
              response["Reason"] = e
              response['Data'] = {"Message": "Resource creation failed"}

            response_body = json.dumps(response)
            headers = {'content-type': '', "content-length": str(len(response_body)) }
            put_response = requests.put(event['ResponseURL'], headers=headers, data=response_body)
            return response

      Handler: index.handler
      Role: !GetAtt CustomResourceLambdaExecutionRole.Arn
      Runtime: python3.7
      Timeout: 300

  CustomResourceLambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSLambdaENIManagementAccess
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: sts:AssumeRole
            Principal:
              Service:
                - lambda.amazonaws.com
      Policies:
        - PolicyName: codepipeline-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/${KubectlRoleName}
                Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:UpdateAssumeRolePolicy
  
  RDSMonitoringRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref RDSMonitoringRoleName
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - monitoring.rds.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: RDSMonitoringPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${RDSMonitoringRoleName}'
                Effect: Allow
                Action:
                  - cloudwatch:PutMetricData
                  - cloudwatch:GetMetricStatistics
                  - cloudwatch:ListMetrics
                  - cloudwatch:DescribeAlarms

  # Egress security group from EC2 to RDS DB
  CodeBuildSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for CodeBuild EC2 instance. Enable HTTP access via port 5432
      VpcId: !Ref "AWS::VPC::Default"  # Use the default VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          CidrIp: 0.0.0.0/0  # Adjust to the specific IP range if possible
  
  # Ingress security group from EC2 to RDS DB
  MyDBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security group for my PostgreSQL database
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref DBPort
          ToPort: !Ref DBPort
          SourceSecurityGroupName: !GetAtt CodeBuildSecurityGroup.GroupName
          SourceSecurityGroupId: !GetAtt CodeBuildSecurityGroup.GroupId
   
  PSQLDBInstance:
    Type: 'AWS::RDS::DBInstance'
    Properties:
      DBInstanceIdentifier: !Ref DBInstanceID
      DBName: !Ref DBName
      Port: !Ref DBPort
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref DBAllocatedStorage
      Engine: !Ref DBEngine
      EngineVersion: !Ref PostgreSQLEngineVersion
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      MonitoringInterval: 60
      MonitoringRoleArn: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${RDSMonitoringRoleName}'
      VPCSecurityGroups: MyDBSecurityGroup
    DependsOn: RDSMonitoringRole
 
  KubectlAssumeRoleCustomResource:
    Type: Custom::CustomResource
    Properties:
      ServiceToken: !GetAtt CustomResourceLambda.Arn
      KubectlRoleName: !Ref KubectlRoleName
      CodeBuildServiceRoleArn: !GetAtt CodeBuildServiceRole.Arn
    DependsOn:
      - CustomResourceLambda
      - CodeBuildServiceRole

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: codepipeline-access
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - codecommit:GetBranch
                  - codecommit:GetCommit
                  - codecommit:UploadArchive
                  - codecommit:GetUploadArchiveStatus
                  - codecommit:CancelUploadArchive
                  - iam:PassRole
              - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
    DependsOn: CodePipelineArtifactBucket

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: !Sub arn:aws:iam::${AWS::AccountId}:role/${KubectlRoleName}
                Effect: Allow
                Action:
                  - sts:AssumeRole
              - Resource: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${RDSMonitoringRoleName}'
                Effect: Allow
                Action:
                  - sts:AssumeRole
              - Resource: '*'
                Effect: Allow
                Action:
                  - eks:Describe*
              - Resource: '*'
                Effect: Allow
                Action:
                  - ssm:GetParameters
              - Resource: "*"
                Effect: Allow
                Action:
                  - rds:*
              - Resource: '*'
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
              - Resource: '*'
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
              - Resource: '*'
                Effect: Allow
                Action:
                  - ec2:CreateNetworkInterface
                  - ec2:DescribeDhcpOptions
                  - ec2:DescribeNetworkInterfaces
                  - ec2:DeleteNetworkInterface
                  - ec2:DescribeSubnets
                  - ec2:DescribeSecurityGroups
                  - ec2:DescribeVpcs
                  - ec2:CreateNetworkInterfacePermission
              - Resource: !Sub arn:aws:s3:::${CodePipelineArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${EcrDockerRepository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Type: LINUX_CONTAINER
        Image: !Ref CodeBuildDockerImage
        EnvironmentVariables:
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${EcrDockerRepository}
          - Name: REPOSITORY_NAME
            Value: !Ref GitSourceRepo
          - Name: REPOSITORY_BRANCH
            Value: !Ref GitBranch
          - Name: EKS_CLUSTER_NAME
            Value: !Ref EksClusterName
          - Name: EKS_KUBECTL_ROLE_ARN
            Value: !Sub arn:aws:iam::${AWS::AccountId}:role/${KubectlRoleName}
          - Name: RDS_MONITORING_ROLE_ARN
            Value: !Sub 'arn:aws:iam::${AWS::AccountId}:role/${RDSMonitoringRoleName}'
          - Name: DB_HOST
            Value: !GetAtt PSQLDBInstance.Endpoint.Address
          - Name: DB_PORT
            Value: !Ref DBPort
          - Name: DB_NAME
            Value: !Ref DBName
          - Name: DB_USER
            Value: !Ref DBUsername
          - Name: DB_PASSWORD
            Value: !Ref DBPassword
        PrivilegedMode: true
      Name: !Ref AWS::StackName
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
    DependsOn: KubectlAssumeRoleCustomResource

  CodePipelineGitHub:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref CodePipelineArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: App
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitSourceRepo
                Branch: !Ref GitBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: App
              RunOrder: 1
        - Name: Build
          Actions:
            - Name: Build
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: App
              OutputArtifacts:
                - Name: BuildOutput
              RunOrder: 1
    DependsOn: CodeBuildProject
